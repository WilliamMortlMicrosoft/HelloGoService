// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "William Mortl",
            "url": "https://github.com/williammortl/HelloGoService",
            "email": "will@{insert my full name here}.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "returns the readme file",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "basic services"
                ],
                "summary": "home page",
                "responses": {
                    "200": {
                        "description": "html"
                    }
                }
            }
        },
        "/db/{id}": {
            "get": {
                "description": "gets a record",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advanced services"
                ],
                "summary": "db service - retrieve",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "database id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Person"
                        }
                    },
                    "400": {
                        "description": "error message"
                    }
                }
            },
            "post": {
                "description": "adds or updates a record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advanced services"
                ],
                "summary": "db service - add / update",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "database id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok message"
                    },
                    "400": {
                        "description": "error message"
                    }
                }
            }
        },
        "/hello": {
            "get": {
                "description": "get a \"hello world\" message",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "basic services"
                ],
                "summary": "gets a \"hello world\" message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.helloResponse"
                        }
                    },
                    "400": {
                        "description": "error message"
                    }
                }
            }
        },
        "/math/{operator}": {
            "post": {
                "description": "performs 3 operations: sum, subtract, multiply",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advanced services"
                ],
                "summary": "mathematics service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "+|-|*",
                        "name": "operator",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "numbers",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.mathNumbers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.mathNumbers"
                        }
                    },
                    "400": {
                        "description": "error message"
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "returns a message when pinged",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "basic services"
                ],
                "summary": "pings the service",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.pingResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "db.Person": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "handlers.helloResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.mathNumbers": {
            "type": "object",
            "properties": {
                "numbers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "handlers.pingResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Hello GO Service Example API",
	Description: "This is a suite of simple service API's.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
